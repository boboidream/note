(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{538:function(n,a,e){"use strict";e.r(a);var s=e(42),t=Object(s.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"irb-互动环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#irb-互动环境"}},[n._v("#")]),n._v(" IRB 互动环境")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ irb\n")])])]),e("p",[n._v("Ruby是個動態強分型的直譯式程式語言")]),n._v(" "),e("h2",{attrs:{id:"字符类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符类型"}},[n._v("#")]),n._v(" 字符类型")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("整数 Integer ,任何整数都是 "),e("code",[n._v("Fixnum")]),n._v(" 对象。运算结果为整数")])]),n._v(" "),e("li",[e("p",[n._v("浮点数 "),e("code",[n._v("Float")]),n._v(" 对象")])]),n._v(" "),e("li",[e("p",[e("code",[n._v("String")]),n._v("对象 单双引号括起来，字串不能直接跟數字相加，會發生例外錯誤")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n\nvar1 = 'stop'\nvar2 = 'foobar'\nvar3 = \"aAbBcC\"\n\nputs var1.reverse # pots\nputs var2.length # 6\nputs var3.upcase # AABBCC\nputs var3.downcase # aabbcc\n\n# 内插模式\nverb = 'work'\nwhere = 'office'\n\n# 双引号字符串\nputs \"I #{verb} at the #{where}\" # 輸出 I work at the office\n")])])]),e("ul",[e("li",[n._v("类型转换")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n# 相加前需要手动转换\n\nto_s(轉成字串)\n\nto_i(轉成整數)\n\nto_f(轉成浮點數)\n\n")])])]),e("ul",[e("li",[n._v("区域变量")])]),n._v(" "),e("p",[n._v("區域變數使用小寫開頭，偏好單字之間以底線_來分隔。範例如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n\ncomposer = 'Mozart'\nputs composer + ' was \"da bomb\", in his day.'\n\nmy_composer = 'Beethoven'\nputs 'But I prefer ' + my_composer + ', personally.'\n")])])]),e("ul",[e("li",[n._v("Constant 常数")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n# 大寫開頭的是為常數\n\nFoo = 1\nFoo = 2 # (irb):3: warning: already initialized constant Foo\n\nRUBY_PLATFORM # => "x86_64-darwin10.7.0"\nENV # => { "PATH" => "....", "LC_ALL" => "zh_TW.UTF-8" }\n')])])]),e("ul",[e("li",[n._v("空值 nil")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n# 表示未設定值、未定義的狀態：\n\n\nnil # nil\nnil.class # NilClass\n\nnil.nil? # true\n42.nil? # false\n\nnil == nil # true\nfalse == nil # false\n")])])]),e("ul",[e("li",[e("p",[n._v("Ruby偏好一律使用單行註解：")])]),n._v(" "),e("li",[e("p",[n._v("Symbols 字串符號")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n# 是唯一且不會變動的識別名稱，用冒號開頭.\n\n# 相同名稱的Symbol不會再重複建構物件，所以使用Symbol可以執行的更有效率。\n\n\n:this_is_a_symbol\n相同名稱的Symbol不會再重複建構物件，所以使用Symbol可以執行的更有效率。\n\n\nputs "foobar".object_id      # 輸出 2151854740\nputs "foobar".object_id      # 輸出 2151830100\n')])])]),e("ul",[e("li",[n._v("Array 数组")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n# 可放任意类型\na = [ 1, "cat", 3.14 ]\n\nputs a[0] # 輸出 1\nputs a.size # 輸出 3\n# inspect方法會將物件轉成適合給人看的字串\nputs a.inspect # 輸出 [1, "cat", nil]\n\ncolors = ["red", "blue"]\n\ncolors.push("black")\ncolors << "white"\nputs colors.join(", ") # red, blue, black, white\n\ncolors.pop\nputs colors.last #black\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\nlanguages = ['Ruby', 'Javascript', 'Perl']\n\nlanguages.each do |lang|\n  puts 'I love ' + lang + '!'\nend\n\n# I Love Ruby!\n# I Love Javascript!\n# I Love Perl!\n")])])]),e("ul",[e("li",[n._v("Hash")])]),n._v(" "),e("p",[n._v("Hash是一種鍵值對(Key-Value)的資料結構，雖然你可以使用任何物件當作Key，但是通常我們使用Symbol當作Key。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n\nconfig = { foo: 123, bar: 456 } # 等同於 { :foo => 123, :bar => 456 }\n\n# each\nconfig = { :foo => 123, :bar => 456 }\nconfig.each do |key, value|\n  puts "#{key} is #{value}"\nend\n')])])]),e("h2",{attrs:{id:"流程控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程控制"}},[n._v("#")]),n._v(" 流程控制")]),n._v(" "),e("ul",[e("li",[n._v("比较")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n\nputs 1 > 2 # 大於\nputs 1 < 2 # 小於\nputs 5 >= 5 # 大於等於\nputs 5 <= 4 # 小於等於\nputs 1 == 1 # 等於\nputs 2 != 1 # 不等於\n\nputs ( 2 > 1 ) && ( 2 > 3 ) # 和\nputs ( 2 > 1 ) || ( 2 > 3 ) # 或\n")])])]),e("ul",[e("li",[n._v("if")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n\ntotal = 26000\n\nif total > 100000\n  puts "large account"\nelsif total > 25000\n  puts "medium account"\nelse\n  puts "small account"\nend\n\n# 只有一行\nputs "greater than ten" if total > 10\n')])])]),e("ul",[e("li",[n._v("三元运算符")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n\nx = 3\ny = ( x > 3 ) ? "foo" : "bar"\n')])])]),e("ul",[e("li",[n._v("Case")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n\ncase name\n  when "John"\n    puts "Howdy John!"\n  when "Ryan"\n    puts "Whatz up Ryan!"\n  else\n    puts "Hi #{name}!"\nend\n')])])]),e("ul",[e("li",[e("p",[n._v("while, loop, until, next and break")])]),n._v(" "),e("li",[e("p",[n._v("正则")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n# 抓出手機號碼\nphone = "123-456-7890"\nif phone =~ /(\\d{3})-(\\d{3})-(\\d{4})/\n  ext  = $1\n  city = $2\n  num  = $3\nend\n')])])]),e("ul",[e("li",[n._v("函数")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n# 方法中的return是可以省略的，Ruby就會回傳最後一行運算的值\ndef say_hello(name)\n  \"Hi, \" + name\nend\n\nputs say_hello('ihower')\n# 輸出 Hi, ihower\n\n# 呼叫方法時，括號也是可以省略的\nsay_hello 'ihower'\n")])])]),e("ul",[e("li",[n._v("?與!的慣例")])]),n._v(" "),e("p",[n._v("方法名稱可以用?或!結尾，前者表示會回傳Boolean值")]),n._v(" "),e("h2",{attrs:{id:"对象导向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象导向"}},[n._v("#")]),n._v(" 对象导向")]),n._v(" "),e("p",[n._v("Ruby的類別其實也是一種常數，所以也是大寫開頭，使用new方法可以建立出物件")]),n._v(" "),e("ul",[e("li",[n._v("自定义类")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n\nclass Person # 大寫開頭的常數\n\n  def initialize(name) # 建構式\n    @name = name # 物件變數\n  end\n\n  def say(word)\n    puts "#{word}, #{@name}" # 字串相加\n  end\n\nend\n\np1 = Person.new("ihower")\np2 = Person.new("ihover")\n\np1.say("Hello") # 輸出 Hello, ihower\np2.say("Hello") # 輸出 Hello, ihover\n')])])]),e("ul",[e("li",[n._v("定义类的方法和变量")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n\nclass Person\n\n  @@name = “ihower” # 類別變數\n\n  def self.say # 類別方法\n    puts @@name\n  end\n\nend\n\nPerson.say # 輸出 ihower\n")])])]),e("ul",[e("li",[n._v("资料变量")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n所有的物件變數(@開頭)、類別變數(@@開頭)，都是封裝在類別內部的，類別外無法存取：\n\n\nclass Person\n  def initialize(name)\n    @name = name\n  end\nend\n\np = Person.new('ihower')\np.name                      # 出現 NoMethodError 錯誤\np.name = 'peny'             # 出現 NoMethodError 錯誤\n")])])]),e("ul",[e("li",[n._v("可通过定义方法，读取内部变量")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n# attr_accessor、attr_writer、attr_reader類別方法可以直接定義這些方法。\n\n\nclass Person\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\nend\n\np = Person.new('ihower')\n")])])]),e("p",[n._v("跟其他程式語言不太一樣，Ruby的類別層級內也可以執行程式")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n\nclass Demo\n  puts "foobar"\nend\n\n# 當你載入這個類別的時候，就會執行puts "foobar"輸出foobar\n')])])]),e("h2",{attrs:{id:"方法的封装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法的封装"}},[n._v("#")]),n._v(" 方法的封装")]),n._v(" "),e("p",[n._v("類別中的方法預設是public的，宣告private或protected的話，該行以下的方法就會套用：")]),n._v(" "),e("p",[n._v("class MyClass")]),n._v(" "),e("p",[n._v("def public_method\nend")]),n._v(" "),e("p",[n._v("private")]),n._v(" "),e("p",[n._v("def private_method_1\nend")]),n._v(" "),e("p",[n._v("def private_method_2\nend")]),n._v(" "),e("p",[n._v("protected")]),n._v(" "),e("p",[n._v("def protected_method\nend")]),n._v(" "),e("p",[n._v("end\n兩著差別在於private只有在物件內部才能呼叫，預設的接收者(receiver)就是物件本身，也就是self。而protected方法除了可以在本身內部呼叫以外，還可以被子類別的物件、或是另一個相同類別的物件呼叫。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\nobject.call_method的意思是object收到執行call_method的指令，\n\n你甚至可以改寫成object.__send__(:call_method)\n\n")])])]),e("h2",{attrs:{id:"class-继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class-继承"}},[n._v("#")]),n._v(" Class 继承")]),n._v(" "),e("p",[n._v("Ruby使用小於<符號代表類別繼承：")]),n._v(" "),e("p",[n._v("class Pet\nattr_accessor :name, :age")]),n._v(" "),e("p",[n._v('def say(word)\nputs "Say: #{word}"\nend\nend')]),n._v(" "),e("p",[n._v('class Cat < Pet\ndef say(word)\nputs "Meow~"\nsuper\nend\nend')]),n._v(" "),e("p",[n._v('class Dog < Pet\ndef say(word, person)\nputs "Bark at #{person}!"\nsuper(word)\nend\nend')]),n._v(" "),e("p",[n._v('Cat.new.say("Hi")\nDog.new.say("Hi", "ihower")\n輸出')]),n._v(" "),e("p",[n._v('Meow~\nSay: Hi\nBark at ihower!\nSay: Hi\n這個範例中，Cat和Dog子類別覆寫了Pet say方法，其中的super是用來呼叫被覆寫掉的Pet say方法。另外，沒有括號的super和有括號的super()是有差異的，前者Ruby會自動將所有參數都代進去來呼叫父類別的方法，後者則是自己指定參數。此例中如果Dog say裡只寫super，則會發生wrong number of arguments的錯誤，這是因為Ruby會傳say("Hi", "ihower")給Pet say而發生錯誤。')]),n._v(" "),e("h2",{attrs:{id:"module"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[n._v("#")]),n._v(" Module")]),n._v(" "),e("p",[n._v("它跟Class類別非常相似，你可以在裡面定義方法。只是你不能用new來建立它。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n\nmodule MyUtil\n\n  def self.foobar\n    puts "foobar"\n  end\n\nend\n\nMyUtil.foobar\n# 輸出 foobar\n')])])]),e("p",[n._v("首先是debug.rb")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\nmodule Debug\n  def who_am_i?\n    puts "#{self.class.name}: #{self.inspect}"\n  end\nend\n')])])]),e("p",[n._v("然後是foobar.rb")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\nrequire "./debug"\nclass Foo\n  include Debug # 這個動作叫做 Mixin\nend\n\nclass Bar\n  include Debug\nend\n\nf = Foo.new\nb = Bar.new\nf.who_am_i? # 輸出 Foo: #<Foo:0x00000102829170>\nb.who_am_i? # 輸出 Bar: #<Bar:0x00000102825b88>\n')])])]),e("p",[n._v("Ruby使用Module來解決多重繼承的問題，")]),n._v(" "),e("h2",{attrs:{id:"iterator-迭代器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iterator-迭代器"}},[n._v("#")]),n._v(" Iterator 迭代器")]),n._v(" "),e("p",[n._v("例如each是一個陣列的方法，它會走訪其中的元素，其中的do ... end是each方法的參數，稱作Code Block，是一個匿名函式(anonymous function)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\nlanguages = ['Ruby', 'Javascript', 'Perl']\nlanguages.each do |lang|\n  puts \"I love #{lang}!\"\nend\n# I Love Ruby!\n# I Love Javascript!\n# I Love Perl!\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("# 反覆三次\n3.times do\n  puts 'Good Job!'\nend\n# Good Job!\n# Good Job!\n# Good Job!\n\n# 從一數到九\n1.upto(9) do |x|\n  puts x\nend\n\n# 多一個索引區塊變數\nlanguages = ['Ruby', 'Javascript', 'Perl']\nlanguages.each_with_index do |lang, i|\n    puts \"#{i}, I love #{lang}!\"\nend\n# 0, I Love Ruby!\n# 1, I Love Javascript!\n# 2, I Love Perl!\n")])])]),e("p",[n._v("(Code block)的形式除了do ... end，也可以改用大括號。通常單行會會用大括號，多行會用do ... end的形式。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('3.times { puts "Hello" }\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('# 迭代並造出另一個陣列\na = ["a", "b", "c", "d"]\nb = a.map {|x| x + "!" }\nputs b.inspect\n\n# 結果是 ["a!", "b!", "c!", "d!"]\n\n# 找出符合條件的值\nb = [1, 2, 3].find_all{ |x| x % 2 == 0 }\nb.inspect\n# 結果是 [2]\n\n# 迭代並根據條件刪除\na = [51, 101, 256]\na.delete_if {|x| x >= 100 }\n# 結果是 [51]\n\n# 客製化排序\n[2, 1, 3].sort! { |a, b| b <=> a }\n# 結果是 [3, 2, 1]\n\n# 計算總和\n(5..10).inject {|sum, n| sum + n }\n# 結果是 45\n\n# 找出最長字串find the longest word\nlongest = ["cat", "sheep", "bear"].inject do |memo, word|\n  ( memo.length > word.length ) ? memo : word\nend\n# 結果是 "sheep"\n')])])]),e("h2",{attrs:{id:"yield"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yield"}},[n._v("#")]),n._v(" Yield")]),n._v(" "),e("p",[n._v("在方法中使用yield可以執行Code block參數：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('# 定義方法\ndef call_block\n  puts "Start"\n  yield\n  yield\n  puts "End"\nend\n\ncall_block { puts "Blocks are cool!" }\n# 輸出\n# "Start"\n# "Blocks are cool!"\n# "Blocks are cool!"\n# "End"\n')])])]),e("h2",{attrs:{id:"例外处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例外处理"}},[n._v("#")]),n._v(" 例外处理")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("begin\n  puts 10 / 0 # 這會丟出 ZeroDivisionError 的例外錯誤\nrescue => e\n  puts e.class # 如果發生例外會執行 rescue 這一段\nensure\n  # 無論有沒有發生例外，ensure 這一段都一定會執行\nend\n# 輸出 ZeroDivisionError\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('raise "Not works!!"\n# 丟出一個 RuntimeError\n\n# 自行自定例外物件\nclass MyException < RuntimeError\nend\n\nraise MyException\n')])])]),e("h2",{attrs:{id:"introspection-反射机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introspection-反射机制"}},[n._v("#")]),n._v(" Introspection 反射机制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('# 這個物件有什麼方法\nObject.methods\n=> ["send", "name", "class_eval", "object_id", "new", "singleton_methods", ...]\n\n# 這個物件有這個方法嗎？\nObject.respond_to? :name\n=> true\n')])])]),e("h2",{attrs:{id:"常见惯例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见惯例"}},[n._v("#")]),n._v(" 常见惯例")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("result ||= a\n")])])]),e("p",[n._v("如果result是nil或false的話，將a指派給result，如果不是的話，什麼都不做。以上這段程式等同於")])])}),[],!1,null,null,null);a.default=t.exports}}]);
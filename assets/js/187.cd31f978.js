(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{556:function(e,a,t){"use strict";t.r(a);var s=t(42),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"database"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#database"}},[e._v("#")]),e._v(" DataBase")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 数据库迁移\nrake db:migrate\n\n# 撤销迁移\nrake db:rollback\n\n# 回滚到任意版本\nrake db:migrate VERSION=0\n\n# 重置数据库\nrake db:drop db:create db:migrate\n\n# 运行 seed 文件\nreke db:seed\n")])])]),t("h2",{attrs:{id:"数据库操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库操作"}},[e._v("#")]),e._v(" 数据库操作")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("CRUD")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# 新增\n> event = Event.new\n> event.name = "Ruby course"\n> event.description = "fooobarrr"\n> event.capacity = 20\n> event.save # 儲存進資料庫，讀者可以觀察另一個指令視窗\n> event.id # 輸出主鍵 1，在 Rails 中的主鍵皆為自動遞增的整數 ID\n\n> event = Event.new( :name => "another ruby course", :capacity => 30)\n> event.save\n> event.id # 輸出主鍵 2，這是第二筆資料\n\n# 查詢\n> event = Event.where( :capacity => 20 ).first\n> events = Event.where( ["capacity >= ?", 20 ] ).limit(3).order("id desc")\n\n# 更新\n> e = Event.find(1) # 找到主鍵為 1 的資料\n> e.name # 輸出 Ruby course\n> e.update( :name => \'abc\', :is_public => false )\n\n# 刪除\n> e.destroy\n')])])])]),e._v(" "),t("li",[t("p",[e._v("常用操作")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('rails generate model User name:string email:string  # 生成数据库使用 模型User 单数\n\n# 模型表现的单个用户特征，而表储存了多个数据，用复数\n\nrails console --sandbox  # rails c 中的沙盒模型，退出后不保存结果\n\n User.create(name: "A Nother", email: "another@example.org")\n\n User.find_by(email: "mhartl@example.com")  # 4.0 开始，推荐使用 find_by 查询属性记录\n\n user.reload.email  # 重新加载对象\n')])])])]),e._v(" "),t("li",[t("p",[e._v("update")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# 直接属性赋值\nuser.email = "foo@bar.com"\n\n# update_attributes\nuser.update_attributes(name: "The Dude", email: "dude@abides.org")  # 接收一个 Hash\n')])])]),t("h2",{attrs:{id:"拼接结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拼接结果"}},[e._v("#")]),e._v(" 拼接结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# author: bobo\nmodule MerchantHelper\n\n  # 按名称和地址搜索商户\n  def search_by_name_address(name, address, page)\n    p name.to_s + \'--------\'\n    datas = []\n    unless name.nil? && address.nil?\n      page = page ? page.to_i : 1\n      merchants_res = Merchant.where("name LIKE ? AND address LIKE ?", "%#{name}%", "%#{address}%").paginate(page:page,per_page:10)\n      merchants_res.each do |f|\n        count = f.restaurants.length\n        merchant_res = f.as_json\n        merchant_res["count"] = count\n        datas.push(merchant_res)\n      end\n    end\n    return datas\n  end\n\nend\n')])])]),t("ul",[t("li",[e._v('as json 后一定要 ["双引号引用"]')]),e._v(" "),t("li",[t("a",{attrs:{href:"http://apidock.com/rails/ActiveModel/Serializers/JSON/as_json",target:"_blank",rel:"noopener noreferrer"}},[e._v("as_json"),t("OutboundLink")],1),e._v(" "),t("blockquote",[t("p",[e._v("as_json is used to create the structure of the JSON as a Hash")])])])]),e._v(" "),t("h2",{attrs:{id:"rails-c"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rails-c"}},[e._v("#")]),e._v(" Rails c")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#修改某条数据\nu = User.find 6\nu.merchant_id = 1\nu.save\n")])])]),t("h2",{attrs:{id:"数据库查询合并"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库查询合并"}},[e._v("#")]),e._v(" 数据库查询合并")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@items = tagged_items | searched_items\nitems = (tagged_items + searched_items).unique\n")])])]),t("h2",{attrs:{id:"ruby-w-调错模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ruby-w-调错模式"}},[e._v("#")]),e._v(" ruby -w 调错模式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("你可以單獨用ruby -w去執行發生錯誤的程式，例如ruby -w app/controller/welcome_controller，這會打開Ruby的警告模式來獲得更準確的語法錯誤訊息。\n")])])]),t("h1",{attrs:{id:"database-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#database-操作"}},[e._v("#")]),e._v(" DataBase 操作")]),e._v(" "),t("h2",{attrs:{id:"更新数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更新数据库"}},[e._v("#")]),e._v(" 更新数据库")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 仅更新某列，过滤验证\napply_record.update_columns(resume_status: params[:resume_status])\n")])])]),t("h2",{attrs:{id:"rails-c-控制台常用操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rails-c-控制台常用操作"}},[e._v("#")]),e._v(" Rails c 控制台常用操作")]),e._v(" "),t("ol",[t("li",[e._v("删除数据")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 单条数据\nMyTable.find(1).delete\n\n# 多条数据\nMyTalbe.where(user_id: 1).delete_all\n")])])]),t("h2",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Post.where(published: true).joins(:comments).merge( Comment.where(spam: false) )\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);